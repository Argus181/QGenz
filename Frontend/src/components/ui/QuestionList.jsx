import React, { useState, useEffect } from 'react';
import { Download, FileText, Brain, MessageSquare, X, AlertTriangle } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import jsPDF from 'jspdf';
import { useUser } from '../../context/UserContext'; // Import useUser to access questionType

const QuestionList = ({ questions, role }) => {
  const { questionType } = useUser(); // Get questionType from UserContext
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState(questionType || 'behavioral'); // Set initial tab based on questionType
  const [showTips, setShowTips] = useState(false);
  const [showFeedbackModal, setShowFeedbackModal] = useState(false);

  // Update activeTab when questionType changes (e.g., after generating new questions)
  useEffect(() => {
    if (questionType) {
      setActiveTab(questionType);
    }
  }, [questionType]);

  // Filter questions based on the active tab
  const filteredQuestions = activeTab === 'behavioral'
    ? questions.filter(q => q.type === 'behavioral')
    : activeTab === 'technical'
    ? questions.filter(q => q.type === 'technical')
    : questions.filter(q => q.type === 'scenario');

  const downloadPDF = () => {
    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(20);
    doc.setTextColor(51, 102, 255);
    doc.text('Qgenz Interview Questions', 20, 20);
    
    // Add subtitle
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated for ${role === 'hr' ? 'HR Professional' : 'Job Seeker'}`, 20, 30);
    
    // Add date
    const today = new Date().toLocaleDateString();
    doc.text(`Date: ${today}`, 20, 40);
    
    // Add questions
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    
    let yPosition = 60;
    
    // Group questions by type
    const behavioralQuestions = questions.filter(q => q.type === 'behavioral');
    const technicalQuestions = questions.filter(q => q.type === 'technical');
    const scenarioQuestions = questions.filter(q => q.type === 'scenario');
    
    // Add behavioral questions
    if (behavioralQuestions.length > 0) {
      doc.setFontSize(16);
      doc.setTextColor(102, 51, 255);
      doc.text('Behavioral Questions', 20, yPosition);
      yPosition += 10;
      
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      
      behavioralQuestions.forEach((q, i) => {
        // Check if we need a new page
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 20;
        }
        
        doc.text(`${i+1}. ${q.text}`, 20, yPosition);
        yPosition += 10;
      });
      
      yPosition += 10;
    }
    
    // Add technical questions
    if (technicalQuestions.length > 0) {
      // Check if we need a new page
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
      
      doc.setFontSize(16);
      doc.setTextColor(0, 204, 204);
      doc.text('Technical Questions', 20, yPosition);
      yPosition += 10;
      
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      
      technicalQuestions.forEach((q, i) => {
        // Check if we need a new page
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 20;
        }
        
        doc.text(`${i+1}. ${q.text}`, 20, yPosition);
        yPosition += 10;
      });
      
      yPosition += 10;
    }
    
    // Add scenario questions
    if (scenarioQuestions.length > 0) {
      // Check if we need a new page
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
      
      doc.setFontSize(16);
      doc.setTextColor(255, 165, 0);
      doc.text('Scenario Questions', 20, yPosition);
      yPosition += 10;
      
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      
      scenarioQuestions.forEach((q, i) => {
        // Check if we need a new page
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 20;
        }
        
        doc.text(`${i+1}. ${q.text}`, 20, yPosition);
        yPosition += 10;
      });
    }
    
    // Add footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor(150, 150, 150);
      doc.text('Generated by Qgenz - AI Interview Question Generator', 20, 290);
      doc.text(`Page ${i} of ${pageCount}`, 180, 290);
    }
    
    // Save the PDF
    doc.save(`qgenz-questions-${role}-${today}.pdf`);
  };

  const toggleTips = () => {
    setShowTips(!showTips);
  };

  const getTips = () => {
    if (role === 'hr') {
      return [
        "Focus on open-ended questions that require detailed responses",
        "Include situational questions to assess problem-solving abilities",
        "Ask follow-up questions to dig deeper into candidates' experiences",
        "Balance technical and behavioral questions for a comprehensive assessment",
        "Standardize your interview process by asking the same core questions to all candidates"
      ];
    } else {
      return [
        "Prepare examples using the STAR method (Situation, Task, Action, Result)",
        "Research the company thoroughly before the interview",
        "Practice your responses aloud to build confidence",
        "Prepare questions to ask the interviewer about the role and company",
        "Review technical concepts relevant to the position"
      ];
    }
  };

  const handleFeedbackClick = () => {
    setShowFeedbackModal(true);
    setTimeout(() => {
      setShowFeedbackModal(false);
      navigate('/feedback');
    }, 1500);
  };

  return (
    <div className="relative">
      {/* Main Card */}
      <div className="card animate-scale-in">
        <div className="mb-6 flex items-center justify-between">
          <h2 className="text-2xl font-bold">Your Interview Questions Are Ready!</h2>
          
          <div className="flex gap-2">
            <button 
              onClick={downloadPDF}
              className="btn-outline flex items-center gap-1"
            >
              <Download className="h-4 w-4" />
              <span>Download PDF</span>
            </button>
            
            <button 
              onClick={toggleTips}
              className={`btn-outline flex items-center gap-1 ${showTips ? 'bg-gray-200 dark:bg-gray-700' : ''}`}
            >
              <MessageSquare className="h-4 w-4" />
              <span>Tips</span>
            </button>
          </div>
        </div>
        
        {/* Tabs */}
        <div className="mb-6 flex border-b border-gray-200 dark:border-gray-700">
          <button
            onClick={() => setActiveTab('behavioral')}
            className={`relative flex items-center gap-1 px-4 py-2 text-sm font-medium transition-colors ${
              activeTab === 'behavioral'
                ? 'text-secondary-600 dark:text-secondary-400'
                : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
            }`}
          >
            <Brain className="h-4 w-4" />
            <span>Behavioral</span>
            {activeTab === 'behavioral' && (
              <span className="absolute bottom-0 left-0 h-0.5 w-full bg-secondary-500"></span>
            )}
          </button>
          
          <button
            onClick={() => setActiveTab('technical')}
            className={`relative flex items-center gap-1 px-4 py-2 text-sm font-medium transition-colors ${
              activeTab === 'technical'
                ? 'text-accent-600 dark:text-accent-400'
                : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
            }`}
          >
            <FileText className="h-4 w-4" />
            <span>Technical</span>
            {activeTab === 'technical' && (
              <span className="absolute bottom-0 left-0 h-0.5 w-full bg-accent-500"></span>
            )}
          </button>
          
          <button
            onClick={() => setActiveTab('scenario')}
            className={`relative flex items-center gap-1 px-4 py-2 text-sm font-medium transition-colors ${
              activeTab === 'scenario'
                ? 'text-orange-600 dark:text-orange-400'
                : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
            }`}
          >
            <AlertTriangle className="h-4 w-4" />
            <span>Scenario</span>
            {activeTab === 'scenario' && (
              <span className="absolute bottom-0 left-0 h-0.5 w-full bg-orange-500"></span>
            )}
          </button>
        </div>
        
        {/* Questions List */}
        <ul className="space-y-4">
          {filteredQuestions.map((question) => (
            <li 
              key={question.id}
              className={`rounded-lg border p-4 transition-all duration-300 ${
                question.type === 'behavioral'
                  ? 'border-secondary-100 bg-secondary-50 dark:border-secondary-900 dark:bg-secondary-900/20'
                  : question.type === 'technical'
                  ? 'border-accent-100 bg-accent-50 dark:border-accent-900 dark:bg-accent-900/20'
                  : 'border-orange-100 bg-orange-50 dark:border-orange-900 dark:bg-orange-900/20'
              }`}
            >
              <p className="text-gray-800 dark:text-gray-200">{question.text}</p>
              <div className="mt-2 flex items-center">
                <span 
                  className={`rounded-full px-2 py-0.5 text-xs font-medium ${
                    question.type === 'behavioral'
                      ? 'bg-secondary-100 text-secondary-800 dark:bg-secondary-900/40 dark:text-secondary-300'
                      : question.type === 'technical'
                      ? 'bg-accent-100 text-accent-800 dark:bg-accent-900/40 dark:text-accent-300'
                      : 'bg-orange-100 text-orange-800 dark:bg-orange-900/40 dark:text-orange-300'
                  }`}
                >
                  {question.type === 'behavioral' ? 'Behavioral' : question.type === 'technical' ? 'Technical' : 'Scenario'}
                </span>
              </div>
            </li>
          ))}
        </ul>
        
        {filteredQuestions.length === 0 && (
          <div className="py-8 text-center text-gray-500 dark:text-gray-400">
            No questions found for this category
          </div>
        )}
      </div>
      
      {/* Feedback Button */}
      <div className="fixed bottom-6 right-6 z-10">
        <button
          onClick={() => navigate('/feedback')}
          className="flex items-center gap-2 rounded-full bg-indigo-600 px-4 py-2 text-white shadow-lg transition-transform hover:scale-105 hover:bg-indigo-700"
        >
          <MessageSquare className="h-5 w-5" />
          <span>Give Feedback</span>
        </button>
      </div>
      
      {/* Feedback Modal */}
      {showFeedbackModal && (
        <div className="fixed bottom-20 right-6 z-50 w-64 rounded-lg bg-white p-4 shadow-lg dark:bg-gray-800 animate-fade-in">
          <p className="text-center font-medium">Redirecting to feedback page...</p>
          <p className="mt-2 text-center text-gray-600 dark:text-gray-400">
            Thank you for your interest in providing feedback!
          </p>
        </div>
      )}
      
      {/* Tips Panel */}
      <div className={`fixed bottom-0 right-0 top-0 z-40 w-80 transform bg-white p-6 shadow-lg transition-transform duration-300 dark:bg-gray-800 ${showTips ? 'translate-x-0' : 'translate-x-full'}`}>
        <div className="mb-6 flex items-center justify-between">
          <h3 className="text-xl font-bold">Interview Tips</h3>
          <button
            onClick={toggleTips}
            className="rounded-full p-1 text-gray-500 hover:bg-gray-100 hover:text-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-300"
          >
            <X className="h-5 w-5" />
          </button>
        </div>
        
        <ul className="space-y-3">
          {getTips().map((tip, index) => (
            <li key={index} className="flex gap-2">
              <span className="text-primary-500">•</span>
              <span>{tip}</span>
            </li>
          ))}
        </ul>
        
        <div className="mt-6 rounded-lg bg-primary-50 p-4 dark:bg-primary-900/20">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Remember, the best interviews are conversations, not interrogations. Be authentic and engage meaningfully with the {role === 'hr' ? 'candidate' : 'interviewer'}.
          </p>
        </div>
      </div>
    </div>
  );
};

export default QuestionList;